/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PassengerListService } from "../passengerList.service";
import { PassengerListCreateInput } from "./PassengerListCreateInput";
import { PassengerList } from "./PassengerList";
import { PassengerListFindManyArgs } from "./PassengerListFindManyArgs";
import { PassengerListWhereUniqueInput } from "./PassengerListWhereUniqueInput";
import { PassengerListUpdateInput } from "./PassengerListUpdateInput";

export class PassengerListControllerBase {
  constructor(protected readonly service: PassengerListService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PassengerList })
  async createPassengerList(
    @common.Body() data: PassengerListCreateInput
  ): Promise<PassengerList> {
    return await this.service.createPassengerList({
      data: {
        ...data,

        booking: data.booking
          ? {
              connect: data.booking,
            }
          : undefined,
      },
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        ferry: true,
        id: true,
        passengerEmail: true,
        passengerName: true,
        travelDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PassengerList] })
  @ApiNestedQuery(PassengerListFindManyArgs)
  async passengerLists(
    @common.Req() request: Request
  ): Promise<PassengerList[]> {
    const args = plainToClass(PassengerListFindManyArgs, request.query);
    return this.service.passengerLists({
      ...args,
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        ferry: true,
        id: true,
        passengerEmail: true,
        passengerName: true,
        travelDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PassengerList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async passengerList(
    @common.Param() params: PassengerListWhereUniqueInput
  ): Promise<PassengerList | null> {
    const result = await this.service.passengerList({
      where: params,
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        ferry: true,
        id: true,
        passengerEmail: true,
        passengerName: true,
        travelDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PassengerList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePassengerList(
    @common.Param() params: PassengerListWhereUniqueInput,
    @common.Body() data: PassengerListUpdateInput
  ): Promise<PassengerList | null> {
    try {
      return await this.service.updatePassengerList({
        where: params,
        data: {
          ...data,

          booking: data.booking
            ? {
                connect: data.booking,
              }
            : undefined,
        },
        select: {
          booking: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          ferry: true,
          id: true,
          passengerEmail: true,
          passengerName: true,
          travelDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PassengerList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePassengerList(
    @common.Param() params: PassengerListWhereUniqueInput
  ): Promise<PassengerList | null> {
    try {
      return await this.service.deletePassengerList({
        where: params,
        select: {
          booking: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          ferry: true,
          id: true,
          passengerEmail: true,
          passengerName: true,
          travelDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
