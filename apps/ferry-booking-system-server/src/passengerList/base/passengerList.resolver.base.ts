/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PassengerList } from "./PassengerList";
import { PassengerListCountArgs } from "./PassengerListCountArgs";
import { PassengerListFindManyArgs } from "./PassengerListFindManyArgs";
import { PassengerListFindUniqueArgs } from "./PassengerListFindUniqueArgs";
import { CreatePassengerListArgs } from "./CreatePassengerListArgs";
import { UpdatePassengerListArgs } from "./UpdatePassengerListArgs";
import { DeletePassengerListArgs } from "./DeletePassengerListArgs";
import { Booking } from "../../booking/base/Booking";
import { PassengerListService } from "../passengerList.service";
@graphql.Resolver(() => PassengerList)
export class PassengerListResolverBase {
  constructor(protected readonly service: PassengerListService) {}

  async _passengerListsMeta(
    @graphql.Args() args: PassengerListCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PassengerList])
  async passengerLists(
    @graphql.Args() args: PassengerListFindManyArgs
  ): Promise<PassengerList[]> {
    return this.service.passengerLists(args);
  }

  @graphql.Query(() => PassengerList, { nullable: true })
  async passengerList(
    @graphql.Args() args: PassengerListFindUniqueArgs
  ): Promise<PassengerList | null> {
    const result = await this.service.passengerList(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PassengerList)
  async createPassengerList(
    @graphql.Args() args: CreatePassengerListArgs
  ): Promise<PassengerList> {
    return await this.service.createPassengerList({
      ...args,
      data: {
        ...args.data,

        booking: args.data.booking
          ? {
              connect: args.data.booking,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PassengerList)
  async updatePassengerList(
    @graphql.Args() args: UpdatePassengerListArgs
  ): Promise<PassengerList | null> {
    try {
      return await this.service.updatePassengerList({
        ...args,
        data: {
          ...args.data,

          booking: args.data.booking
            ? {
                connect: args.data.booking,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PassengerList)
  async deletePassengerList(
    @graphql.Args() args: DeletePassengerListArgs
  ): Promise<PassengerList | null> {
    try {
      return await this.service.deletePassengerList(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Booking, {
    nullable: true,
    name: "booking",
  })
  async getBooking(
    @graphql.Parent() parent: PassengerList
  ): Promise<Booking | null> {
    const result = await this.service.getBooking(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
