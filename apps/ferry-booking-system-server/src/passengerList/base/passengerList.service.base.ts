/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PassengerList as PrismaPassengerList,
  Booking as PrismaBooking,
} from "@prisma/client";

export class PassengerListServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PassengerListCountArgs, "select">
  ): Promise<number> {
    return this.prisma.passengerList.count(args);
  }

  async passengerLists(
    args: Prisma.PassengerListFindManyArgs
  ): Promise<PrismaPassengerList[]> {
    return this.prisma.passengerList.findMany(args);
  }
  async passengerList(
    args: Prisma.PassengerListFindUniqueArgs
  ): Promise<PrismaPassengerList | null> {
    return this.prisma.passengerList.findUnique(args);
  }
  async createPassengerList(
    args: Prisma.PassengerListCreateArgs
  ): Promise<PrismaPassengerList> {
    return this.prisma.passengerList.create(args);
  }
  async updatePassengerList(
    args: Prisma.PassengerListUpdateArgs
  ): Promise<PrismaPassengerList> {
    return this.prisma.passengerList.update(args);
  }
  async deletePassengerList(
    args: Prisma.PassengerListDeleteArgs
  ): Promise<PrismaPassengerList> {
    return this.prisma.passengerList.delete(args);
  }

  async getBooking(parentId: string): Promise<PrismaBooking | null> {
    return this.prisma.passengerList
      .findUnique({
        where: { id: parentId },
      })
      .booking();
  }
}
