/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Fleet } from "./Fleet";
import { FleetCountArgs } from "./FleetCountArgs";
import { FleetFindManyArgs } from "./FleetFindManyArgs";
import { FleetFindUniqueArgs } from "./FleetFindUniqueArgs";
import { CreateFleetArgs } from "./CreateFleetArgs";
import { UpdateFleetArgs } from "./UpdateFleetArgs";
import { DeleteFleetArgs } from "./DeleteFleetArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { FleetService } from "../fleet.service";
@graphql.Resolver(() => Fleet)
export class FleetResolverBase {
  constructor(protected readonly service: FleetService) {}

  async _fleetsMeta(
    @graphql.Args() args: FleetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Fleet])
  async fleets(@graphql.Args() args: FleetFindManyArgs): Promise<Fleet[]> {
    return this.service.fleets(args);
  }

  @graphql.Query(() => Fleet, { nullable: true })
  async fleet(
    @graphql.Args() args: FleetFindUniqueArgs
  ): Promise<Fleet | null> {
    const result = await this.service.fleet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Fleet)
  async createFleet(@graphql.Args() args: CreateFleetArgs): Promise<Fleet> {
    return await this.service.createFleet({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Fleet)
  async updateFleet(
    @graphql.Args() args: UpdateFleetArgs
  ): Promise<Fleet | null> {
    try {
      return await this.service.updateFleet({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Fleet)
  async deleteFleet(
    @graphql.Args() args: DeleteFleetArgs
  ): Promise<Fleet | null> {
    try {
      return await this.service.deleteFleet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Fleet,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
