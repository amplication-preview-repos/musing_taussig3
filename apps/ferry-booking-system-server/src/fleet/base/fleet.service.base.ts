/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Fleet as PrismaFleet,
  Booking as PrismaBooking,
} from "@prisma/client";

export class FleetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FleetCountArgs, "select">): Promise<number> {
    return this.prisma.fleet.count(args);
  }

  async fleets(args: Prisma.FleetFindManyArgs): Promise<PrismaFleet[]> {
    return this.prisma.fleet.findMany(args);
  }
  async fleet(args: Prisma.FleetFindUniqueArgs): Promise<PrismaFleet | null> {
    return this.prisma.fleet.findUnique(args);
  }
  async createFleet(args: Prisma.FleetCreateArgs): Promise<PrismaFleet> {
    return this.prisma.fleet.create(args);
  }
  async updateFleet(args: Prisma.FleetUpdateArgs): Promise<PrismaFleet> {
    return this.prisma.fleet.update(args);
  }
  async deleteFleet(args: Prisma.FleetDeleteArgs): Promise<PrismaFleet> {
    return this.prisma.fleet.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.fleet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
}
